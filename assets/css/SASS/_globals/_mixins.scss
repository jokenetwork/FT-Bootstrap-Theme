/* ==========================================================================
   mixins and functions:  DO NOT CHANGE!  updated: 2015-08-27 (PeDo)
   ========================================================================== */


// converts several units to em (supports px, pt, pc, in, mm, cm)
@function em($size) {
    @if not unitless($size) {
        @if unit($size) == em {
            @return $size;
        }

        @return ((0px + $size) / 16px * 1em);
    }

    @return null;
}

// converts several units to rem (supports px, pt, pc, in, mm, cm)
@function rem($size) {
    $size: em($size);

    @if $size {
        @return em($size) / 1em + rem;
    }

    @return null;
}

// FONT SIZE MIXIN for rem
@mixin font-size($size) {
    font-size: $size;
    font-size: rem($size);
}

// responsive img, max-width
@mixin img($max-width) {
    max-width: $max-width;
    width: 100%;
    height: auto;
}

// LINE HEIGHT MIXIN for rem
@mixin line-height($size) {
    line-height: $size;
    line-height: rem($size);
}

// POSITIONING MIXIN for absolute positioned elements
@mixin absolute($top: null, $right: null, $bottom: null, $left: null) {
    top: $top;
    left: $left;
    right: $right;
    bottom: $bottom;
    position: absolute;
}

// SEMI-TRANSPARENT BACKGROUND with old IE fallback
@mixin background-color($color) {
    @if opacity($color) < 1 {
        background-color: opacify($color, 1);
    }

    background-color: $color;

    //@if opacity($color) < 1 {
    //    .no-rgba & {
    //        // IE6-9
    //        filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=#{ie-hex-str($color)}, endColorstr=#{ie-hex-str($color)});
    //    }
    //}
}

// MEDIA QUERY Mixin
@mixin mq($type) {
    @if map-has-key($breakpoints, $type) {
        @media #{map-get($breakpoints, $type)} {
            @content;
        }

        // duplicate style for ie8
        @if index($breakpoints-ie8, $type) {
            @if & {
                .lt-ie9 & {
                    @content;
                }
            } @else {
                .lt-ie9 {
                    @content;
                }
            }
        }
    } @else {
        @warn "Unknown breakpoint #{$type}!";
    }
}


/* Example
.Example
{
    // mindestens 320px, wuerde automatisch in 20em umgerechnet werden
    @include mq(320px) {
        color: red;
    }

    // bleibt 20em, da keine umrechnung notwendig
    @include mq(20em) {
        color: red;
    }

    // identisch zu oben
    @include mq($min: 320px) {
        color: red;
    }

    // min 320px bis max 767px
    @include mq(320px, 768px - 1px) {
        color: blue;
    }

    // identisch zu oben
    @include mq($min: 320px, $max: 768px - 1px) {
        color: blue;
    }

    // maximal 768px
    @include mq($max: 768px) {
        color: green;
    }
}
*/
